package de.eschoenawa.lanchat.plugin.api;

import java.util.ArrayList;
import java.util.List;

/**
 * An abstract class for LANChat-Plugins. A plugin should extend this class to be loaded by LANChat and to get various
 * callbacks for LANChat-Events.
 */
public abstract class Plugin {

    /**
     * This class contains fields to describe the plugin.
     */
    public static class PluginMetaData {
        public final String pluginId;
        public final String name;
        public final String description;
        public final String author;
        public final int version;
        public final String readableVersion;

        /**
         * Create a new PluginMetaData-Instance.
         * @param pluginId The id of the plugin. Use java package names for this (e.g. com.example.myPlugin)
         * @param name The name of the Plugin
         * @param description A short description of what the plugin does
         * @param author The author of the plugin
         * @param version The version of the plugin
         * @param readableVersion A human readable version identifier
         */
        public PluginMetaData(final String pluginId, final String name, final String description, final String author, final int version, final String readableVersion) {
            this.pluginId = pluginId;
            this.name = name;
            this.description = description;
            this.author = author;
            this.version = version;
            this.readableVersion = readableVersion;
        }
    }

    /**
     * Each plugin can create buttons under the 'plugins'-tab in LANChat. This class models these buttons and contains
     * the button text and the action to be performed on button press.
     */
    public static class PluginButton {
        public String text;
        public ButtonAction action;

        public PluginButton(String text, ButtonAction action) {
            this.text = text;
            this.action = action;
        }

        public interface ButtonAction {
            /**
             * Called, when the PluginButton is pressed.
             */
            public void onButtonPress();
        }
    }

    /**
     * Each plugin can define settings which are persisted by LANChat. Plugins may not modify their settings but they
     * can be read out using {@link ApiV1#getPluginSettingValue(String)}. These settings will later be modifiable in the
     * settings menu of LANChat, but for V1 of the PluginSDK they can only be modified manually in the configuration
     * file generated by LANChat for the plugin.
     */
    public static class PluginSetting {
        public String key;
        public String defaultValue;

        public PluginSetting(String key, String defaultValue) {
            this.key = key;
            this.defaultValue = defaultValue;
        }
    }

    /**
     * This method should return an instance of {@link PluginMetaData} to provide meta data for the plugin.
     *
     * @return The meta data for the plugin
     */
    public abstract PluginMetaData getPluginMetaData();

    /**
     * Called when the plugin is loaded from file.
     *
     * @param api An Api object which allows access to various functions of LANChat
     * @return true, if the plugin initialized successfully, otherwise false
     */
    public abstract boolean onLoad(ApiV1 api);

    /**
     * Should return the priority of the plugin in the message processing chain (higher value means higher priority).
     * Plugins with high priority get to modify the incoming / outgoing message later than plugins with low priority.
     * Please note that this means, that plugins with high priority get to process the message last and therefor 'have
     * the last say' in any modification that might occur.
     * This can be used to ensure compatibility with other plugins when changing the message to be sent. This method
     * should only be overridden if the plugin modifies messages (incoming and/or outgoing) or the notification
     * color for incoming messages.
     *
     * @return The priority of the plugin
     */
    public int getMessageProcessingChainPriority() {
        return 0;
    }

    /**
     * Called when a message will be sent. Use this to process outgoing messages. The message can also be modified by
     * returning the new message to be sent. If null is returned, the message will not be sent (unless this is bypassed
     * by other plugins with a higher priority). This method should only be overridden if the plugin modifies outgoing
     * messages or prevents certain messages to be sent (e.g. commands).
     * Note: This method isn't called for messages triggered by plugins.
     *
     * @param originalMessage The message the user intended to send
     * @param currentMessage The message after it was modified by plugins with a lower priority than this plugin
     * @return The message to be sent (null if no message should be sent)
     */
    public String onMessageSend(String originalMessage, String currentMessage) {
        return currentMessage;
    }

    /**
     * Called when a message is received and before it is displayed to the user. Use this to process incoming messages.
     * The message can also be modified by returning the new message to be displayed. If null is returned, the Message
     * will not be displayed to the user (unless this is bypassed by other plugins with a higher priority). This method
     * should only be overridden if the plugin modifies incoming messages or prevents certain messages to be displayed
     * to the user (e.g. commands from other clients on the network).
     * Note: This method will also be called for messages originating from the local LANChat client!
     *
     * @param originalMessage The message received from the network
     * @param currentMessage The received message after it was modified by plugins with a lower priority than this plugin
     * @return The message to be displayed to the user (null if no message should be displayed)
     */
    public String onMessageReceive(String originalMessage, String currentMessage) {
        return currentMessage;
    }

    /**
     * Called when a notification is shown to the user.
     * Note: This method isn't called for notifications that were manually triggered by plugins.
     * @param title The title of the notification
     * @param message The message of the notification
     * @param originalColor The original color of the notification
     * @param currentColor The color of the notification after it was modified by plugins with a lower priority than
     *                     this plugin
     * @return The new notification color (represented in hexadecimal, e.g. 0xFFFFFF, #FFFFFF, FFFFFF, 0xFFFFFFFF,
     * #FFFFFFFF or FFFFFFFF)
     */
    public String getNotificationColor(String title, String message, String originalColor, String currentColor) {
        return currentColor;
    }

    /**
     * Should return a List of all PluginButtons that should be added to the 'plugin'-Tab of LANChat.
     * @return The list of buttons
     */
    public List<PluginButton> getButtons() {
        return new ArrayList<>();
    }

    /**
     * A List of all PluginSettings that should be available. These settings are persisted. Use
     * {@link ApiV1#getPluginSettingValue(String)} to retrieve the current setting.
     * Note: These settings cannot be set by the plugin itself. At the moment they have to be modified in the config
     * file for the plugin, but later these will be found in the LANChat settings window.
     * @return A List of all the PluginSettings for this Plugin
     */
    public List<PluginSetting> getSettings() {
        return new ArrayList<>();
    }

    /**
     * Called when an event was triggered. Events can be used to communicate with other plugins. See
     * {@link ApiV1#postEvent(String)} for how to send an event.
     *
     * @param message The event message
     */
    public void onEvent(String message) {
        // Method does nothing per default
    }

    /**
     * Called when LANChat fails any action while executing plugin code. The stacktrace can be viewed in generated bug
     * report file.
     * Note: This method will not be called if the plugin returns false in {@link Plugin#onLoad(ApiV1)}.
     * @param error An error message with some details (e.g. at which point the error occurred)
     */
    public void onError(String error) {
        // Method does nothing per default
    }

    /**
     * Called when LANChat stops using the plugin. After this method was called you should not receive any callbacks
     * anymore. Calls to the Api-Object will no longer work.
     * Note: This method will also be called when the plugin invalidates the Api using {@link ApiV1#invalidate()}.
     */
    public void onStop() {
        // Method does nothing per default
    }
}
